"""initial

Revision ID: 6eb8d8ed9ce8
Revises:
Create Date: 2025-04-22 08:21:26.918259

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC, StoredObject
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText
sa.StoredObject = StoredObject

# revision identifiers, used by Alembic.
revision = "6eb8d8ed9ce8"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "msg_chats",
        sa.Column("id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("kind", sa.Enum("private", "group", name="chat_kind"), nullable=False),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_msg_chats")),
    )
    op.create_table(
        "msg_users",
        sa.Column("id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_msg_users")),
    )
    with op.batch_alter_table("msg_users", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_msg_users_email"), ["email"], unique=True)
        batch_op.create_index(batch_op.f("ix_msg_users_name"), ["name"], unique=True)

    op.create_table(
        "msg_chat_member",
        sa.Column("id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("chat_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("role", sa.Enum("admin", "member", name="chat_member_role"), nullable=False),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["chat_id"], ["msg_chats.id"], name=op.f("fk_msg_chat_member_chat_id_msg_chats")),
        sa.ForeignKeyConstraint(["user_id"], ["msg_users.id"], name=op.f("fk_msg_chat_member_user_id_msg_users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_msg_chat_member")),
        sa.UniqueConstraint("chat_id", "user_id", name=op.f("uq_msg_chat_member_chat_id")),
    )
    op.create_table(
        "msg_messages",
        sa.Column("id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("chat_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("sender_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("is_reader", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["chat_id"], ["msg_chats.id"], name=op.f("fk_msg_messages_chat_id_msg_chats")),
        sa.ForeignKeyConstraint(["sender_id"], ["msg_users.id"], name=op.f("fk_msg_messages_sender_id_msg_users")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_msg_messages")),
    )
    op.create_table(
        "msg_user_oauth_accounts",
        sa.Column("id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("oauth_name", sa.String(length=1024), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("refresh_token", sa.String(length=1024), nullable=False),
        sa.Column("account_id", sa.String(length=128), nullable=False),
        sa.Column("account_email", sa.String(length=128), nullable=False),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["msg_users.id"], name=op.f("fk_msg_user_oauth_accounts_user_id_msg_users"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_msg_user_oauth_accounts")),
    )
    with op.batch_alter_table("msg_user_oauth_accounts", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_msg_user_oauth_accounts_account_id"), ["account_id"], unique=False)

    op.create_table(
        "msg_groups",
        sa.Column("id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(length=1024), nullable=True),
        sa.Column("creator_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["creator_id"], ["msg_chat_member.id"], name=op.f("fk_msg_groups_creator_id_msg_chat_member")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_msg_groups")),
    )
    with op.batch_alter_table("msg_groups", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_msg_groups_name"), ["name"], unique=True)

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("msg_groups", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_msg_groups_name"))

    op.drop_table("msg_groups")
    with op.batch_alter_table("msg_user_oauth_accounts", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_msg_user_oauth_accounts_account_id"))

    op.drop_table("msg_user_oauth_accounts")
    op.drop_table("msg_messages")
    op.drop_table("msg_chat_member")
    with op.batch_alter_table("msg_users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_msg_users_name"))
        batch_op.drop_index(batch_op.f("ix_msg_users_email"))

    op.drop_table("msg_users")
    op.drop_table("msg_chats")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
