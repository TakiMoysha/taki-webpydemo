[tool.uv]
default-groups = ["dev", "docs", "linting", "test"]

[dependency-groups]
dev = ["pytest>=8.3.5", "aiosqlite>=0.21.0"]
docs = ["git-cliff>=2.7.0"]
linting = [
  "pre-commit>=3.4.0",
  "ruff>=0.0.287",
  "slotscheck",
  "types-click",
  "types-passlib",
  "types-python-jose",
  "types-pyyaml",
  "types-redis",
  "pylint",
  "asyncpg-stubs",
]
test = [
  "hypothesis>=6.130.2",
  "httpx>=0.28.1",
  "coverage",
  "pytest",
  "pytest-asyncio",
  "pytest-xdist",
  "pytest-mock",
  "pytest-cov",
  "pytest-sugar",
  "pytest-sqlalchemy>=0.2.1",
  "pytest-databases[redis]>=0.1.0",
  "pytest-timeout>=2.3.1",
]

[tool.uv.workspace]
members = ["libs/*", "services/*"]

[tool.pytest.ini_options]
timeout = 60
testpaths = ["**/test"]
addopts = ["-ra", "--ignore", "migrations"]
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:google.*",
  "ignore::DeprecationWarning:passlib.*",
  "ignore::DeprecationWarning:aiosql.*",
  "ignore::DeprecationWarning:litestar.constants.*",
  "ignore::DeprecationWarning:litestar.utils.*",
  "ignore::DeprecationWarning:litestar.cli.*",
  "ignore::DeprecationWarning:httpx._client",
]

[tool.ruff]
fix = true
line-length = 120
lint.fixable = ["ALL"]
lint.ignore = [
  "E501",    # pycodestyle line too long, handled by black
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037",   # pyupgrade - removes quotes from type annotation
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "B008",    #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012",  # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401",  # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001",  # Boolean typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "FBT003",  # Boolean Boolean default positional argument in function definition
  "ARG002",  # Unused method argument
  "ARG001",  #  Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "SLF001",
  "PT007",
  'S603',
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "PERF203", # ignore for now; investigate
]
lint.select = ["ALL"]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["libs/**/*", "services/**/*"]
target-version = "py312"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"*/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"__init__.py" = ['F401', 'D104']
"docs/**/*.*" = [
  "S",
  "B",
  "DTZ",
  "A",
  "TC",
  "ERA",
  "D",
  "RET",
  "E731",
  "RUF012",
  "FA100",
  "ARG001",
]
"docs/conf.py" = ["FIX002", "ARG001", "INP001"]
"scripts/*.py" = ["INP001", "ERA001"]
"scripts/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP001"]
"tests/*.py" = ['D103', 'S101', 'D104']

[tool.slotscheck]
# treat failed imports as errors
strict-imports = true

[tool.codespell]
skip = 'uv.lock, package-lock.json'

[tool.git-cliff.git]
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(skip\\)", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
]

[tool.git-cliff.changelog]
trim = true
header = """
# Changelog\n
All commits to this project will be documented in this file.\n
"""
body = """
{% if version %}\
  ## `Release [v{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} <https://github.com/TakiMoysha/taki-webpydemo/releases/tag/v{{ version | trim_start_matches(pat="v") }}>`_
  * `See All commits in v{{ version | trim_start_matches(pat="v") }} <https://github.com/TakiMoysha/taki-webpydemo/commits/v{{ version | trim_start_matches(pat="v") }}>`_ \n
{% else %}\
  ## [unreleased] \n
{% endif %}\

{% if previous %}\
    {% if previous.commit_id %}
        `{{ previous.commit_id | truncate(length=7, end="") }} <https://github.com/TakiMoysha/taki-webpydemo/commit/{{ previous.commit_id }}>`_ ... \
            `{{ commit_id | truncate(length=7, end="") }} <https://github.com/TakiMoysha/taki-webpydemo/commit/{{ commit_id }}>`_ \
            | `See diff for {{ version | trim_start_matches(pat="v") }} <https://github.com/TakiMoysha/taki-webpydemo/compare/{{ previous.commit_id }}...{{ commit_id }}>`_
    {% endif %}\
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
  ## {{ group | upper_first }}
    {% for commit in commits %}
      - [{{ commit.id | truncate(length=7, end="") }}](https://github.com/TakiMoysha/taki-webpydemo/commit/{{ commit.id }}) {% if commit.breaking %}[**breaking**] {% endif %} - {{ commit.message | upper_first | trim }} ({{ commit.author.name }})\
          {% for footer in commit.footers -%}
            {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}
"""
footer = """
<!-- Demo Changelog -->
"""
